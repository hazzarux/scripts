# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

########################################################
# Copyright 2011 Yigit Ozkan.
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0
########################################################

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#    _   _ _                    
#   /_\ | (_) __ _ ___  ___ ___ 
#  //_\\| | |/ _` / __|/ _ | __|
# /  _  \ | | (_| \__ \  __|__ \
# \_/ \_/_|_|\__,_|___/\___|___/

# some more ls aliases
alias ll='ls -alF'
# alias la='ls -A' #ubuntu default
# alias l='ls -CF' #ubuntu default

alias l='ls --color=auto -alCF'
alias la='ls --color=auto -FCa'
alias ld='ls --color=auto -aCl -d * | egrep "^d"' # only subdirectories
alias lt='ls --color=auto -alCt | head -20' # recently changed files

alias md='mkdir -p'

# Automatically push a new directory to the stack when changing directories by using '+' instead of cd
# alias +='pushd'
# not using this.

# Git aliases
# A lot of single letters. Yes, my workflow is very DVCS-centric.
alias push='git push'
alias gstat='git status'
alias s='git s'
alias pull='git pull'
alias ci='git ci'
alias lg='git lg'
alias add='git add'
alias cim='git commit -a'
alias d='git d'
alias dc='git dc'
alias st='git stash'
alias sp='git sp'
alias pom='git pom'
alias pum='git pum'
alias clone='git clone'
alias co='git co'
alias cot='git cot'
alias b='git b'
alias tree='tree -Csu'

alias c='./configure'
alias smi='sudo make install'

# always prompt before overwrite
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# i'm using too much 'vim', i know!
alias :wq='exit'

# ping (mostly for checking for internet)
alias p='ping'
alias p.google='ping www.google.com'

# ps (looking for working programs)
# alias ps.efg='ps -ef |grep' #NOT NECESSARY see next line
alias pg='ps -aux |grep'

# This is GOLD for finding out what is taking so much space on your drives!
alias diskspace="du -S | sort -n -r |more"

# cd aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# am I on the internet?
alias p4='ping 4.2.2.2 -c 4'

# cd into the old directory
alias bd='cd "$OLDPWD"'

# install a package and automatically respond yes to confirmation prompt
alias inst="sudo apt-get install"

# remove a package and its configuration files
alias remp="sudo apt-get purge"

# search for a package - apt-cache and aptitude search in different ways
# so have both
alias search="apt-cache search"
alias searchc="aptitude search"
alias show="aptitude show"

# Debian update
alias apg='sudo apt-get update && apt-get dist-upgrade && apt-get clean'

# check external ip via command line
alias myip="wget www.whatismyip.com/automation/n09230945.asp -O - -q"



#    ___                  _   _                 
#   / __\_   _ _ __   ___| |_(_) ___  _ __  ___ 
#  / _\ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# / /   | |_| | | | | (__| |_| | (_) | | | \__ \
# \/     \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

# My little shortcut for committing files
# git commit -m "this is a commit" ==> cim this is a commit
#function cim() {
#  command git commit -am "$*"
#}

# Makes extraction easier
function extract() {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}



# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# easily create & cd into directory
mkcd() {
        if [ $# != 1 ]; then
                echo "Usage: mkcd <dir>"
        else
                mkdir -p $1 && cd $1
        fi
}

#    ___                       _      _   _                 
#   / __\ ___  _ __ ___  _ __ | | ___| |_(_) ___  _ __  ___ 
#  / /   / _ \| '_ ` _ \| '_ \| |/ _ \ __| |/ _ \| '_ \/ __|
# / /___| (_) | | | | | | |_) | |  __/ |_| | (_) | | | \__ \
# \____/ \___/|_| |_| |_| .__/|_|\___|\__|_|\___/|_| |_|___/
#                       |_|           
#
# These are some of my faves. I also have installed the bash_completion scripts
# from homebrew, in addition to some project-specific ones.
#
# * General, http://bash-completion.alioth.debian.org/
# * Homebrew, https://github.com/mxcl/homebrew/raw/master/Library/Contributions/brew_bash_completion.sh
# * Git, https://github.com/git/git/raw/master/contrib/completion/git-completion.bash
# * Django, https://github.com/django/django/raw/master/extras/django_bash_completion
# Rails doesn't have a good one.

complete -A user su mail finger

# Compression autocompletions
complete -f -o default -X '*.+(zip|ZIP)'  zip
complete -f -o default -X '!*.+(zip|ZIP)' unzip
complete -f -o default -X '*.+(z|Z)'      compress
complete -f -o default -X '!*.+(z|Z)'     uncompress
complete -f -o default -X '*.+(gz|GZ)'    gzip
complete -f -o default -X '!*.+(gz|GZ)'   gunzip tar
complete -f -o default -X '*.+(bz2|BZ2)'  bzip2
complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2
complete -f -o default -X '!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract

# For these languages, only complete with corresponding filenames
complete -f -X '!*.py' python
complete -f -X '!*.rb' ruby
complete -f -X '!*.pl' perl

#    ___       _   _                 
#   /___\_ __ | |_(_) ___  _ __  ___ 
#  //  // '_ \| __| |/ _ \| '_ \/ __|
# / \_//| |_) | |_| | (_) | | | \__ \
# \___/ | .__/ \__|_|\___/|_| |_|___/
#       |_|                          

# Wrap lines correctly after resizing them
shopt -s checkwinsize

# Fix typos when changing into directories
shopt -s cdspell

# Check a command is in the hash table before executing it
shopt -s checkhash

# Don't waste time completing when line is empty
shopt -s no_empty_cmd_completion

# Expand filenames beginning with period
shopt -s dotglob

# globstar doesn't exist in bash 3.2
if [ ${BASH_VERSINFO[0]} -gt 4 ]; then
    # Set recursive globbing with **
    shopt -s globstar
fi

# No new mail notifications
shopt -u mailwarn
unset MAILCHECK

# let's you do things like
# export s=/etc
# cd s
shopt -s cdable_vars

# Use vi keybindings
set -o vi


